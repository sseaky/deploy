" @Author: Seaky
" @Date:   2019-06-26
" http://vimdoc.sourceforge.net/htmldoc/options.html

" source ~/.vimrc_vundle

" set nocompatible              " be iMproved, required
" filetype off                  " required


syntax on
" set t_Co=256
" colorscheme badwolf

set history=1000
" 检测文件类型
filetype on
" 针对不同的文件类型采用不同的缩进格式，粘贴python代码时会累积缩进，貌似和这个无关
filetype indent on
set autoread          " 文件修改之后自动载入。
set shortmess=atI     " 启动的时候不显示那个援助索马里儿童的提示
" set paste   "贴时保持格式，加了在粘贴代码时自动缩进会反而乱掉?
"- 则点击光标不会换,用于复制
set mouse-=a           " 在所有的模式下面打开鼠标。
set selection=exclusive
set selectmode=mouse,key


set number      " 显示行号
set cursorline  " 突出显示当前行
" set cursorcolumn
" set nowrap      " 取消换行。
" 为方便复制，用<F6>开启/关闭行号显示:
" nnoremap <F6> :set nonumber!<CR>:set foldcolumn=0<CR>:set nocursorline!<CR>:set nocursorcolumn!<CR>
nnoremap <F6> :set nonumber!<CR>:set foldcolumn=0<CR>:set nocursorline!<CR>

set autoread                    " reload files when changed on disk, i.e. via `git checkout`
set title                       " change the terminal's title
execute "set titleold=".hostname() 
set magic   " For regular expressions turn magic on

" 括号配对情况
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" 设置文内智能搜索提示
" 高亮search命中的文本。
set hlsearch
" 搜索时忽略大小写
set ignorecase
" 随着键入即时搜索
set incsearch
" 有一个或以上大写字母时仍大小写敏感
set smartcase

" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
" set foldmethod=syntax
" 在左侧显示折叠的层次
" set foldcolumn=4

set tabstop=4                " 设置Tab键的宽度        [等同的空格个数]
set shiftwidth=4
set expandtab                " 将Tab自动转化成空格    [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
" 按退格键时可以一次删掉 4 个空格
set softtabstop=4

" 影响粘贴代码
" set ai "Auto indent
set si "Smart indent
set smarttab

set shiftround


" 显示当前的行号列号：
set ruler
" 在状态栏显示正在输入的命令
set showcmd
set showmode 

" Set 6 lines to the cursor - when moving vertically using j/k 上下滚动,始终在中间
set so=6

" No annoying sound on errors
" 去掉输入错误的提示声音
set noerrorbells
set visualbell
set t_vb=
set tm=500

" 设备leader键超时
set timeoutlen=2000

set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set ffs=unix,dos,mac
set termencoding=utf-8
set encoding=utf-8
set formatoptions+=m
set formatoptions+=B

set backspace=indent,eol,start

" leader, default '\' 
let mapleader = ','
let g:mapleader = ','

" kj 替换 Esc
inoremap kj <Esc>
 
" Quickly close the current window
nnoremap <leader>q :q<CR>
" Quickly save the current file
nnoremap <leader>w :w<CR>
 
" select all
map <Leader>sa ggVG"
 
" Swap implementations of ` and ' jump to markers
" By default, ' jumps to the marked line, ` jumps to the marked line and
" column, so swap them
nnoremap ' `
nnoremap ` '

" remap U to <C-r> for easier redo
nnoremap U <C-r>

"Map ; to : and save a million keystrokes
" ex mode commands made easy 用于快速进入命令行
nnoremap ; :
 
" Force saving files that require root permission
" cnoremap w!! w !sudo tee > /dev/null %
cmap w!! w !sudo tee >/dev/null %
 
" command mode, ctrl-a to head， ctrl-e to tail
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>


autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    " .sh
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif
 
    " python
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif
 
    normal G
    normal o
    normal o
endfunc

" if this not work ,make sure .viminfo is writable for you
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif    


